{"version":3,"sources":["resources/gong.mp3","resources/mountains.jpg","resources/dark.jpeg","components/Menu.js","components/TimerContainer.js","components/TimerButton.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Menu","props","className","children","TimerContainer","time","TimerButton","onClick","value","CityTimerApp","handleKeyDown","event","keyCode","console","log","timerButton","timer","state","timerIsOn","clearInterval","setState","timerValue","setInterval","subTractTime","updatePageTitle","document","title","getTimerValue","timerSeconds","timerMinutes","playSound","showNotifications","seconds","minutes","s","toString","querySelector","play","resetTimerSmall","resetTimerBig","switchTheme","body","darkModeOn","documentElement","style","setProperty","bgLight","bgDark","teaTime","n","supported","show","handleClick","window","focus","close","target","tag","notifyMe","this","addEventListener","src","soundFile","onRef","ref","icon","timeout","React","Component","Boolean","location","hostname","match","ReactDOM","render","App","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c8792d87.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/gong.7087c8c4.mp3\";","module.exports = __webpack_public_path__ + \"static/media/mountains.df10a365.jpg\";","module.exports = __webpack_public_path__ + \"static/media/dark.99305aca.jpeg\";","import React from 'react';\n\nfunction Menu(props) {\n  return <div className=\"menu\">{props.children}</div>;\n}\n\nexport default Menu;\n","import React from 'react';\n\n// const showTime = (minutes = 10, seconds = 11) => {\n//   let s = seconds < 10 ? '0' + seconds.toString() : seconds.toString();\n//   let m = minutes < 10 ? '0' + minutes.toString() : minutes.toString();\n//   return m + ':' + s;\n// };\n\nconst TimerContainer = ({ time }) => {\n  return (\n    <div className=\"timer-container\">\n      {/* <p className='timer-value'>{props.seconds.toS}</p> */}\n      <p className=\"timer-value\">{time}</p>\n    </div>\n  );\n};\n\nexport default TimerContainer;\n","import React from 'react';\n\nconst TimerButton = ({ onClick, value }) => {\n  return (\n    <button onClick={onClick} className=\"timer-button\">\n      {value}\n    </button>\n  );\n};\n\nexport default TimerButton;\n","import React from 'react';\nimport ReactNotifications from 'react-browser-notifications';\n\nimport './style.css';\nimport soundFile from './resources/gong.mp3';\nimport bgLight from './resources/mountains.jpg';\nimport bgDark from './resources/dark.jpeg';\n\nimport Menu from './components/Menu';\nimport TimerContainer from './components/TimerContainer';\nimport TimerButton from './components/TimerButton';\n\nclass CityTimerApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      timerMinutes: 25,\n      timerSeconds: 0,\n      timerIsOn: false,\n      timer: null,\n      timerValue: 'start',\n      darkModeOn: false,\n    };\n  }\n\n  componentDidMount() {\n    this.updatePageTitle();\n    this.switchTheme();\n\n    document.addEventListener('keydown', this.handleKeyDown);\n  }\n\n  handleKeyDown = (event) => {\n    switch (event.keyCode) {\n      case 32: //space key\n        console.log('spinning wheel');\n        this.timerButton();\n        break;\n      default:\n        break;\n    }\n  };\n\n  timerButton = () => {\n    let timer;\n\n    if (!this.state.timerIsOn) {\n      timer = setInterval(this.subTractTime, 1000);\n      this.setState(() => ({ timer }));\n      this.setState(() => ({ timerValue: 'stop' }));\n    } else {\n      clearInterval(this.state.timer);\n      this.setState(() => ({ timerValue: 'start' }));\n    }\n\n    this.setState((state) => ({\n      timerIsOn: !state.timerIsOn,\n    }));\n  };\n\n  updatePageTitle = () => {\n    document.title = this.getTimerValue();\n  };\n\n  subTractTime = () => {\n    this.setState((state) => ({ timerSeconds: state.timerSeconds - 1 }));\n\n    // < 1 is so timer doesn't go into negatives\n    if (this.state.timerSeconds < 1) {\n      if (this.state.timerMinutes <= 0) {\n        this.playSound();\n        this.timerButton();\n        this.showNotifications();\n      } else {\n        this.setState(() => ({ timerSeconds: 59 }));\n        this.setState((state) => ({ timerMinutes: state.timerMinutes - 1 }));\n      }\n    }\n\n    this.updatePageTitle();\n  };\n\n  getTimerValue = () => {\n    let seconds = this.state.timerSeconds;\n    let minutes = this.state.timerMinutes;\n\n    let s = seconds < 10 ? '0' + seconds.toString() : seconds.toString();\n    let m = minutes < 10 ? '0' + minutes.toString() : minutes.toString();\n    return m + ':' + s;\n  };\n\n  playSound = () => {\n    let audio = document.querySelector('audio');\n\n    audio.play();\n  };\n\n  resetTimerSmall = () => {\n    this.setState(() => ({ timerMinutes: 25 }));\n    this.setState(() => ({ timerSeconds: 0 }));\n  };\n\n  resetTimerBig = () => {\n    this.setState(() => ({ timerMinutes: 45 }));\n    this.setState(() => ({ timerSeconds: 0 }));\n  };\n\n  switchTheme = () => {\n    let dark = '#333';\n    let light = '#fff';\n    let body = document.querySelector('body');\n\n    this.setState((state) => ({ darkModeOn: !this.state.darkModeOn }));\n\n    if (!this.state.darkModeOn) {\n      document.documentElement.style.setProperty('--main-color', light);\n      document.documentElement.style.setProperty('--main-bg-color', dark);\n      body.style = `background: url(${bgDark})`;\n    } else {\n      document.documentElement.style.setProperty('--main-color', dark);\n      document.documentElement.style.setProperty('--main-bg-color', light);\n      body.style = `background: url(${bgLight})`;\n      body.style = 'background-size: cover';\n    }\n  };\n\n  teaTime = () => {\n    this.setState(() => ({ timerMinutes: 1 }));\n    this.setState(() => ({ timerSeconds: 30 }));\n  };\n\n  showNotifications = () => {\n    if (this.n.supported()) this.n.show();\n  };\n\n  handleClick = (event) => {\n    window.focus();\n    this.n.close(event.target.tag);\n  };\n\n  notifyMe = () => {\n    if (this.n.supported()) this.n.show();\n  };\n\n  render() {\n    return (\n      <>\n        {/* \"Wind Chime, Gamelan Gong, A.wav\" by InspectorJ (www.jshaw.co.uk) of Freesound.org */}\n        <audio src={soundFile} />\n        <TimerContainer time={this.getTimerValue()} />\n        <TimerButton onClick={this.timerButton} value={this.state.timerValue} />\n        <Menu>\n          <ul className=\"menu-list\">\n            <li onClick={this.teaTime} className=\"menu-icon\">\n              <i className=\"fas fa-mug-hot\"></i>\n            </li>\n            <li onClick={this.resetTimerSmall}>25:00</li>\n            <li onClick={this.resetTimerBig}>45:00</li>\n            <li onClick={this.playSound} className=\"menu-icon\">\n              <i className=\"fas fa-play\"></i>\n            </li>\n            <li onClick={this.switchTheme} className=\"menu-icon\">\n              <i className=\"fas fa-moon\" />\n            </li>\n            <li className=\"menu-icon\">\n              <ReactNotifications\n                onRef={(ref) => (this.n = ref)} // Required\n                title=\"Take a break\" // Required\n                body=\"it is well deserved\"\n                icon=\"devices-logo.png\"\n                tag=\"abcdef\"\n                timeout=\"5000\"\n                onClick={(event) => this.handleClick(event)}\n              />\n              <i onClick={this.showNotifications} className=\"fas fa-bell\" />\n            </li>\n          </ul>\n        </Menu>\n      </>\n    );\n  }\n}\n\nexport default CityTimerApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\n// import App from './App';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}